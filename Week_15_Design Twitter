//https://leetcode.com/problems/design-twitter/ 

class Twitter {
public:
    vector<pair<int,int>> twit;
    map<int, map<int,int>> follows;
    /** Initialize your data structure here. */
    Twitter() {
        
    }
    
    /** Compose a new tweet. */
    void postTweet(int userId, int tweetId) {
        twit.push_back({userId, tweetId});
    }
    
    
    vector<int> getNewsFeed(int userId) {
        vector<int> result;
        for (auto& i: twit){
             if (i.first == userId || follows[userId].find(i.first) != follows[userId].end())
         
                result.push_back(i.second);
     
        }
        reverse(result.begin(), result.end());
        if (result.size()>10) result.resize(10);
        return result;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    void follow(int followerId, int followeeId) {
        follows[followerId][followeeId]=1;
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    void unfollow(int followerId, int followeeId) {
        if (follows.find(followerId) != follows.end())
            follows[followerId].erase(followeeId);
        
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
